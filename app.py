import streamlit as st
import numpy as np
import matplotlib.pyplot as plt

# --- 1. Опис завдання та введення варіанту ---
st.title("Обчислення та візуалізація функції")
st.write("Ця програма обчислює значення функції $f(x)$ та будує її графік відповідно до вашого варіанта.")

# Запит номера варіанта у користувача
# Використовуємо st.number_input для зручного введення числа.
# min_value=1, max_value=100 - для обмеження вводу, step=1 - крок зміни значення.
variant_number = st.number_input(
    "Введіть номер вашого варіанта (це значення 'i' у формулі):",
    min_value=1,
    max_value=100,
    value=1, # Значення за замовчуванням
    step=1
)

# Перетворення номера варіанта на змінну i
i = variant_number

st.markdown(f"**Ваш номер варіанта (i):** `{i}`")

# --- 2. Визначення функції f(x) ---
# Ми визначаємо функцію Python, яка буде обчислювати f(x) за даною формулою.
# Важливо врахувати можливе ділення на нуль, хоча в даному випадку знаменник
# -i + 2.5i + x спрощується до 1.5i + x.
# Також враховуємо sin^(i+1) - це означає (sin(x))^(i+1)

def f(x, i_val):
    """
    Обчислює значення функції f(x) за заданою формулою.
    f(x) = (i + x) / (-i + 2.5i + x) + sin^(i+1)(x + pi/2)

    Параметри:
    x (float або np.array): Вхідне значення або масив значень x.
    i_val (int): Значення параметра 'i' (номер варіанта).

    Повертає:
    float або np.array: Обчислене значення функції f(x).
    """
    if i_val == 0: # Запобігаємо діленню на нуль, якщо i_val може бути 0.
                   # Хоча в завданні i >= 1, це хороша практика.
        st.error("Номер варіанта 'i' не може бути нулем.")
        return np.nan # Повертаємо Not a Number

    # Спрощений знаменник: -i + 2.5i + x = 1.5i + x
    denominator = 1.5 * i_val + x

    # Захист від ділення на нуль
    if isinstance(denominator, np.ndarray):
        # Якщо denominator є масивом NumPy, обробляємо ділення на нуль для кожного елемента
        term1 = np.where(denominator != 0, (i_val + x) / denominator, np.nan)
    else:
        # Якщо denominator є одним числом
        if denominator == 0:
            st.warning("Ділення на нуль! Знаменник дорівнює нулю при x = -1.5 * i")
            return np.nan
        term1 = (i_val + x) / denominator

    # Обчислення другої частини: sin^(i+1)(x + pi/2)
    # sin(x + pi/2) = cos(x)
    # Тому sin^(i+1)(x + pi/2) = cos^(i+1)(x)
    # np.cos(x) повертає косинус, а потім ми підносимо до степеня (i_val + 1)
    term2 = np.power(np.cos(x), (i_val + 1))

    return term1 + term2

# --- 3. Обчислення та візуалізація графіка ---

st.header("Графік функції $f(x)$")

# Визначення діапазону x для графіка
# Зі скріншоту видно, що діапазон x від -1 до 1.
x_values = np.linspace(-1, 1, 500) # 500 точок для гладкого графіка

# Обчислення значень f(x) для заданих x
# Використовуємо try-except для обробки можливих помилок у функції (наприклад, nan)
try:
    y_values = f(x_values, i)

    # Побудова графіка за допомогою matplotlib
    fig, ax = plt.subplots() # Створюємо фігуру та осі
    ax.plot(x_values, y_values, color='black') # Будуємо графік чорним кольором
    ax.set_xlabel("x") # Підпис осі x
    ax.set_ylabel("f(x)") # Підпис осі y
    ax.set_title(f"Графік f(x) для i = {i}") # Заголовок графіка
    ax.grid(True) # Додаємо сітку

    # Відображення графіка у Streamlit
    st.pyplot(fig) # Передаємо фігуру matplotlib до Streamlit

except Exception as e:
    st.error(f"Виникла помилка під час обчислення або побудови графіка: {e}")
    st.write("Будь ласка, перевірте номер варіанта або формулу.")

# --- 4. Виведення формули та її спрощення ---
st.header("Використана формула")
st.latex(r"f(x) = \frac{i+x}{-i + 2.5i + x} + \sin^{i+1}(x + \frac{\pi}{2})")
st.write("Ми використали спрощення для знаменника та тригонометричної функції:")
st.latex(r"-i + 2.5i + x = 1.5i + x")
st.latex(r"\sin(x + \frac{\pi}{2}) = \cos(x)")
st.latex(r"\sin^{i+1}(x + \frac{\pi}{2}) = \cos^{i+1}(x)")

st.markdown(f"**Таким чином, функція обчислюється як:**")
st.latex(r"f(x) = \frac{i+x}{1.5i + x} + \cos^{i+1}(x)")


# --- 5. Висновок ---
st.markdown("---")
st.write(
    "Ця програма демонструє використання Streamlit для створення інтерактивних "
    "веб-додатків для математичних обчислень та візуалізації."
)
st.write("Розроблено для екзамену з програмування.")
